App


external i32 addTwoIfZero(i32 left, i32 right, i32 condition)
{
	new i32 result = 0
	
	if i32 eq result condition
		add i32 result = left right
	end
	
	return result
}  


external i32 isGreaterThan(i32 left, i32 right)
{
	new i32 result = 0
	new i32 resTrue = 1
	
	if i32 gt_s left right
		add i32 result = result resTrue
	end

	return result		
}

external i32 subTwoIfPositive(i32 left, i32 right)
{
	new i32 result = 0
	
	if i32 gt_s left right
		sub i32 result = left right
	end
	
	return result
}

external i32 isNegative(i32 val)
{
	new i32 result = 0
	new i32 resTrue = 1
	
	if i32 gt_s result val
		add i32 result = result resTrue
	end
	
	return result
}


//external i32 mulIfLessThan(i32 left, i32 right, i32 condition)
//{
//	new i32 result = 0
//	new i32 val = 0
//	
//	mul i32 val = left right
//
//	if i32 lt_s val condition
//		add i32 result = result val
//	end
//
//	return result
//	
//}

//external i32 isEven(i32 val)
//{	
//	new i32 result = 0	
//	new i32 resTrue = 1
//
//	new i32 rem = 0
//	new i32 evenCheck = 2
//	
//	mod i32 rem = val evenCheck
//	
//	if i32 eq result rem
//		add i32 result = result resTrue
//	end
//
//	return result
//}